// paren matcher

//checkoff "6004.csail.mit.edu/currentsemester/6004assignment.doit" "Lab #4" 1103641864
//checkoff "192.168.2.16:8000/checkoff/50002assignment.doit" "Lab #4" 1103641864
checkoff "10.1.3.26/checkoff/50002assignment.doit" "Lab #4" 1103641864

states s0 s1 s2

symbols ( ) 0 1 x { w q 

tape test1 (
result1 test1 0

tape test2 )
result1 test2 0

tape test3 ( )
result1 test3 1

tape test4 ) (
result1 test4 0

tape test5 ( ) ( ) ( ( ( ) ) ( ) ) ) ( )
result1 test5 0

tape test6 ( ) ( ( ( ) ( ( ( ) ) ( ) ) )
result1 test6 0

tape test7 ( ) ( ( ) ( ( ( ) ) ( ) ) )
result1 test7 1

// define additional symbols, your states and actions here
 

// Uhing's 5-state machine: writes 1915 1s in 2,133,492 steps before halting.
// Note that the best known 5-state writes 4098 1s...
// See http://grail.cba.csuohio.edu/~somos/busy.html

// specify transistions: action state symbol state' write move
//    state = the current state of the FSM
//    symbol = the symbol read from the current cell
//    state' = state on the next cycle 
//    write = symbol to be written into the current cell
//    move = tape movement ("l" = left, "r" = right, "-"=stay put)
//    old  R     new  W M
//action  A   -      B  1 r
//action  A   1      C  1 l
//action  B   -      A  - l
//action  B   1      D  - l
//action  C   -      A  1 l
//action  C   1 *halt*  1 l
//action  D   -      B  1 l
//action  D   1      E  1 r
//action  E   -      D  - r
//action  E   1      B  - r

action s0   -  *halt*    1   -
action s0   (      s1    {   l
action s0   )  *halt*    0   -
action s0   w      s0    q   r
action s0   q      s0    w   l

action s1   (      s1    x   l
action s1   )      s1    q   r
action s1   x      s1    w   l
action s1   -  *halt*    0   -
action s1   {      s0    w   l
action s1   w      s1    q   r
action s1   q      s1    w   l

//action s0   (      s1    0   r
//action s1   -  *halt*    -   -
